// comments.js
import { API_BASE_URL, fetchData, getToken, handleApiError, escapeHTML, showAlert, getUserData, formatDate } from "./utils.js";
import { createCommentCard } from "../javascript/createComponents.js";

/**
 * Render m·ªôt comment v√†o container
 * Th√™m n√∫t x√≥a n·∫øu comment thu·ªôc v·ªÅ user hi·ªán t·∫°i
 */
function renderSingleComment(comment, container, prepend = false) {
  if (!container) return;

  const currentUser = getUserData();
  const commentCard = createCommentCard(comment);

  // Th√™m th·ªùi gian comment
  const timeEl = document.createElement("span");
  timeEl.classList.add("comment-time");
  timeEl.textContent = formatDate(comment.createdAt);
  commentCard.appendChild(timeEl);

  // Th√™m n√∫t x√≥a n·∫øu comment c·ªßa user hi·ªán t·∫°i
  if (currentUser && comment.userId._id === currentUser.id) {
    const deleteBtn = document.createElement("button");
    deleteBtn.classList.add("comment-delete-btn");
    deleteBtn.textContent = "üóëÔ∏è X√≥a";
    deleteBtn.addEventListener("click", () => deleteComment(comment._id, commentCard));
    commentCard.appendChild(deleteBtn);
  }

  commentCard.classList.add("fade-in");

  if (prepend) container.prepend(commentCard);
  else container.appendChild(commentCard);
}

/**
 * Load danh s√°ch b√¨nh lu·∫≠n t·ª´ API v√† render
 */
async function loadComments(postId, container) {
  if (!container) return;
  try {
    const comments = await fetchData(`${API_BASE_URL}/comments/post/${postId}`, "GET");
    container.innerHTML = "";
    if (!Array.isArray(comments) || comments.length === 0) {
      container.innerHTML = `<p class="text-muted">Ch∆∞a c√≥ b√¨nh lu·∫≠n n√†o.</p>`;
      return;
    }
    comments.forEach(c => renderSingleComment(c, container));
  } catch (err) {
    handleApiError(err, "Kh√¥ng th·ªÉ t·∫£i b√¨nh lu·∫≠n");
    container.innerHTML = `<p class="text-danger">L·ªói t·∫£i b√¨nh lu·∫≠n</p>`;
  }
}

/**
 * Th√™m b√¨nh lu·∫≠n m·ªõi
 */
async function addComment(postId, container, text) {
  const token = getToken();
  if (!token) {
    showAlert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ b√¨nh lu·∫≠n!", "warning");
    return;
  }
  if (!container) return;

  try {
    const safeText = escapeHTML(text);
    const newComment = await fetchData(`${API_BASE_URL}/comments/${postId}`, "POST", { text: safeText }, token);
    renderSingleComment(newComment, container, true);
    showAlert("B√¨nh lu·∫≠n ƒë√£ ƒë∆∞·ª£c ƒëƒÉng!", "success");
  } catch (err) {
    handleApiError(err);
  }
}

/**
 * X√≥a comment
 */
async function deleteComment(commentId, commentElement) {
  const token = getToken();
  if (!token) return showAlert("Vui l√≤ng ƒëƒÉng nh·∫≠p!", "warning");
  if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b√¨nh lu·∫≠n n√†y?")) return;

  try {
    await fetchData(`${API_BASE_URL}/comments/${commentId}`, "DELETE", null, token);
    commentElement.remove();
    showAlert("ƒê√£ x√≥a b√¨nh lu·∫≠n!", "success");
  } catch (err) {
    handleApiError(err, "Kh√¥ng th·ªÉ x√≥a b√¨nh lu·∫≠n");
  }
}

/**
 * Kh·ªüi t·∫°o comment cho m·ªôt post (ho·∫∑c nhi·ªÅu post)
 * @param {string} postId 
 * @param {HTMLElement} container 
 * @param {HTMLFormElement} form 
 * @param {HTMLTextAreaElement} textarea 
 */
function initComments(postId, container, form, textarea) {
  if (!postId || !container) return;
  loadComments(postId, container);

  if (form && textarea) {
    form.addEventListener("submit", (e) => {
      e.preventDefault();
      const text = textarea.value.trim();
      if (!text) return showAlert("Vui l√≤ng nh·∫≠p n·ªôi dung b√¨nh lu·∫≠n!", "warning");
      addComment(postId, container, text);
      textarea.value = "";
    });
  }
}

export { renderSingleComment, loadComments, addComment, deleteComment, initComments };