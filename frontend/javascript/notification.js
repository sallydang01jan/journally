// üìÅ frontend/javascript/notification.js
import { API_BASE_URL, getToken, apiFetch, formatDate, parseJwt, removeToken, requireAuth } from "./utils.js";
import { createNotificationCard } from "./createComponents.js";

document.addEventListener("DOMContentLoaded", async () => {
  // ‚úÖ B·∫Øt bu·ªôc login
  requireAuth(); // n·∫øu ch∆∞a login s·∫Ω redirect sang auth.html

  const token = getToken();
  const notificationCard = document.getElementById("notification-card");

  // ·∫®n n√∫t notification n·∫øu ch∆∞a login
  const notifBtn = document.querySelector(".notification-button");
  if (!token && notifBtn) {
    notifBtn.style.display = "none";
  }

  // üü¢ L·∫•y danh s√°ch th√¥ng b√°o
  async function fetchNotifications() {
    try {
      const notifications = await apiFetch(`${API_BASE_URL}/notifications`);
      renderNotifications(notifications);
    } catch (err) {
      console.error("L·ªói t·∫£i th√¥ng b√°o:", err);
      notificationCard.innerHTML = `<p class="text-danger">‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i th√¥ng b√°o.</p>`;
    }
  }

  // üü° Hi·ªÉn th·ªã danh s√°ch th√¥ng b√°o
  function renderNotifications(list) {
    notificationCard.innerHTML = ""; // reset tr∆∞·ªõc

    if (!list.length) {
      notificationCard.innerHTML = `<p class="text-muted text-center mt-4">Ch∆∞a c√≥ th√¥ng b√°o n√†o üåô</p>`;
      return;
    }

    list.forEach((n) => {
      const card = createNotificationCard({
        ...n,
        formattedTime: formatDate(n.createdAt),
        user: n.user, 
      });

      card.dataset.id = n._id;

      // G·∫Øn event ri√™ng cho t·ª´ng notification
      const markBtn = card.querySelector(".mark-as-read-button");
      const closeBtn = card.querySelector(".close-button");

      if (markBtn) markBtn.addEventListener("click", () => handleMarkRead(n._id, card));
      if (closeBtn) closeBtn.addEventListener("click", () => handleDelete(n._id, card));

      notificationCard.appendChild(card);
    });
  }

  // üü£ ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc
  async function handleMarkRead(id, card) {
    try {
      await apiFetch(`${API_BASE_URL}/notifications/${id}/read`, {
        method: "PUT",
        headers: { Authorization: `Bearer ${token}` },
      });
      card.classList.add("read");
      const markBtn = card.querySelector(".mark-as-read-button");
      if (markBtn) markBtn.remove();
    } catch (err) {
      console.error("L·ªói ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc:", err);
    }
  }

  // üî¥ X√≥a th√¥ng b√°o
  async function handleDelete(id, card) {
    if (!confirm("B·∫°n ch·∫Øc ch·∫Øn mu·ªën xo√° th√¥ng b√°o n√†y?")) return;

    try {
      await apiFetch(`${API_BASE_URL}/notifications/${id}`, {
        method: "DELETE",
        headers: { Authorization: `Bearer ${token}` },
      });
      card.remove();
    } catch (err) {
      console.error("L·ªói xo√° th√¥ng b√°o:", err);
    }
  }

  // G·ªçi khi trang load
  fetchNotifications();
});
